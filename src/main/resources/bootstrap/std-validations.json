[
	{  
		"type" : "sys.validate",
		"new" : [{ 
			"id" : ["all_op_type_registered"],
			"type" : ["*"],
			"comment" : "Validate that operation is registered",
			"role" : "owner",
			"validate" : [
				"std:eq(.ref.op.id,.type)"
			]
		}]
	},
	{  
		"type" : "sys.validate",
		"new" : [{ 
			"id" : ["all_op_arity_new_del"],
			"type" : ["*"],
			"comment" : "Validate operation arity",
			"role" : "none",
			"if" : [
				"std:eq(.ref.op.arity, 0)"
			],
			"validate" : [
				"std:leq(std:size(.new),1)",
				"std:leq(std:size(.old),1)"
			]
		}]
	},
	{  
		"type" : "sys.validate",
		"new" : [{ 
			"id" : ["all_op_arity_same_type_and_id"],
			"type" : ["*"],
			"comment" : "Validate operation arity their types and ids",
			"role" : "none",
			"if" : [
				"std:eq(.ref.op.arity, 0)",
				"std:eq(std:size(.new),1)",
				"std:eq(std:size(.old),1)"
			],
			"validate" : [
				"std:eq(.type,.old.0.type)",
				"std:eq(.new.id,.old.id)"
			]
		}]
	},
	{  
		"type" : "sys.validate",
		"new" : [{ 
			"id" : ["operation_std_arity_always_0"],
			"type" : ["sys.operation"],
			"comment" : "Validate that for all standard operation arity is always 0 and nobody could change it",
			"role" : "none",
			"if" : [
				"set:in(.type, set:all('sys.operation','sys.validate','sys.role','sys.grant', 'sys.login', 'sys.signup'))",
				"std:eq(std:size(.new),1)"
			],
			"validate" : [
				"std:eq(.new.arity, 0)"
			]
		}]
	},
	{  
		"type" : "sys.validate",
		"new" : [{ 
			"id" : ["sysvalidate_check_previous_role_for_change"],
			"type" : ["sys.validate"],
			"comment" : "Validate validation changes. Check previous role. It is strict and nobody could change it",
			"role" : "none",
			"if" : [
				"std:eq(std:size(.old), 1)"
			],
			"validate" : [
				"auth:has_sig_roles(this, .old.0.role)"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["role_none_could_not_be_created"],
			"type" : ["sys.role"],
			"comment" : "Check that role none could not be created. Couldn't be changed!",
			"role" : "none",
			"validate" : [
				"std:neq(.new.id, 'none')"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["role_could_be_changed_only_by_owner"],
			"type" : ["sys.role"],
			"comment" : "Check that role could be changed only by owner. Role couldn't be deleted cause it will require revoking all grant access!",
			"role" : "none",
			"if" : [
				"std:eq(std:size(.old), 1)"
			],
			"validate" : [
				"auth:has_sig_roles(this, .old.0.owner_role)",
				"std:eq(std:size(.new), 1)"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["grant_check_op_role_and_check_assigned_role"],
			"type" : ["sys.grant"],
			"comment" : "Check that role is assigned by person who has it. The role could be revoked or added only if operation is signed by a person who has that role. Check that Owner role could change that validation.",
			"owner_role" : "owner",
			"validate" : [
				"auth:has_sig_roles(this, set:minus(.new.roles, .old.roles))",
				"auth:has_sig_roles(this, set:minus(.old.roles, .new.roles))"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["signup_login_only_by_administrator"],
			"type" : ["sys.login", "sys.signup"],
			"comment" : "Check that only administrator could signup and login users",
			"owner_role" : "master",
			"validate" : [
				"auth:has_sig_roles(this, 'administrator')"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["login_should_reference_its_signup"],
			"type" : ["sys.login"],
			"comment"   : "Every login should reference signup (that validates signup is active)",
			"owner_role" : "none",
			"if" :  [
				"std:eq(std:size(.new),1)"
			],
			"validate" : [
				"std:eq(.ref.s.type, 'sys.signup')",
				"std:eq(.new.id.0, .ref.s.id.0)"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["login_self_signed_provided"],
			"type" : ["sys.login"],
			"comment"   : "Check that login is signed by signup key. Nobody could change that rule",
			"owner_role" : "none",
			"if" :  [
				"std:eq(.ref.s.auth_method,'provided')",
				"std:eq(std:size(.old),0)"
			],
			"validate" : [
				"set:in(.ref.s.id, .signed_by)"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["login_update_self_signed_provided"],
			"type" : ["sys.login"],
			"comment"   : "Check that login is signed by signup key. Nobody could change that rule",
			"owner_role" : "none",
			"if" :  [
				"std:eq(.ref.s.auth_method,'provided')",
				"std:eq(std:size(.old),1)"
			],
			"validate" : [
				"std:or(set:in(.ref.s.id, .signed_by), set:in(str:combine(.old.id,':'), .signed_by))"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["signup_self_signed_provided"],
			"type" : ["sys.signup"],
			"comment"   : "Check that signup is signed by itself. Nobody could change that rule",
			"owner_role" : "none",
			"if" :  [
				"std:or(std:eq(.new.auth_method,'provided'), std:eq(.old.auth_method,'provided'))"
			],
			"validate" : [
				"set:in(.new.id, .signed_by)"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["login_self_signed_pwd"],
			"type" : ["sys.login"],
			"comment"   : "Check that login is signed by signup key. Only owner could change that rule",
			"owner_role" : "owner",
			"if" :  [
				"std:eq(.ref.s.auth_method,'pwd')",
				"std:eq(std:size(.old),0)"
			],
			"validate" : [
				"set:in(.ref.s.id, .signed_by)"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["login_update_self_signed_pwd"],
			"type" : ["sys.login"],
			"comment"   : "Check that login is signed by signup key. Only owner could change that rule",
			"owner_role" : "owner",
			"if" :  [
				"std:eq(.ref.s.auth_method,'pwd')",
				"std:eq(std:size(.old),1)"
			],
			"validate" : [
				"std:or(set:in(.ref.s.id, .signed_by), set:in(str:combine(.old.id,':'), .signed_by))"
			]
		}]
	},
	{
		"type" : "sys.validate",
		"new" : [{
			"id" : ["signup_self_signed_pwd"],
			"type" : ["sys.signup"],
			"comment"   : "Check that signup is signed by itself. Only owner could change that rule",
			"owner_role" : "owner",
			"if" :  [
				"std:or(std:eq(.new.auth_method,'pwd'),std:eq(.old.auth_method,'pwd'))"
			],
			"validate" : [
				"set:in(.new.id, .signed_by)"
			]
		}]
	}
]
